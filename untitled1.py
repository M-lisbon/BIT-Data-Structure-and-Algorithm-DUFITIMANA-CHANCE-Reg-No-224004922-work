# -*- coding: utf-8 -*-
"""untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/M-lisbon/11ad7c8a5341ebcb608e0a980d192536/untitled1.ipynb
"""

# -------------------------------
# Project 15: Course Registration System
# -------------------------------

import array

# 1. INTEGERS
# Example: student IDs in course registration
student_ids = [105, 102, 110, 99, 120]
print("Original IDs:", student_ids)

# Remove any ID < 100 (condition)
student_ids = [sid for sid in student_ids if sid >= 100]
print("After Condition (IDs >= 100):", student_ids)

# Sort IDs
student_ids.sort()
print("Sorted IDs:", student_ids)


# 2. STRINGS (Formatted Report with compound boolean)
course_name = "Computer Science"
registered_students = 25
max_capacity = 40

# Compound condition: check if students are above 20 and less than capacity
if registered_students > 20 and registered_students < max_capacity:
    status = "Above Standard"
else:
    status = "Below Standard"

report = f"""
Course Registration Report
--------------------------
Course Name     : {course_name}
Registered      : {registered_students}
Capacity        : {max_capacity}
Status          : {status}
"""
print(report)


# 3. DICTIONARIES (list of dicts for records)
courses = [
    {"id": 1, "name": "Math", "value": 30},
    {"id": 2, "name": "Physics", "value": 25},
    {"id": 3, "name": "Chemistry", "value": 20},
]

# Update record (e.g., change Physics to 28 students)
courses[1]["value"] = 28

# Delete one record (remove Chemistry)
del courses[2]

# Compute total and average values
total_value = sum(course["value"] for course in courses)
average_value = total_value / len(courses)

print(f"Total students across courses: {total_value}")
print(f"Average per course: {average_value:.2f}")


# 4. LISTS
course_list = ["Math", "Physics", "Chemistry"]
print("Original Courses:", course_list)

# Add a new course
course_list.append("Biology")
print("After Adding Biology:", course_list)


# 5. BOOLEANS
threshold = 25
if average_value > threshold:
    print("Registration Status: Above Threshold")
else:
    print("Registration Status: Below Threshold")


# 6. ARRAYS
# Store a fixed-size numeric subset (marks or counts)
course_counts = array.array("i", [30, 28, 22, 18])

print("Array (Course counts):", course_counts)

# Compute total, min, max, average
arr_total = sum(course_counts)
arr_avg = arr_total / len(course_counts)
arr_min = min(course_counts)
arr_max = max(course_counts)

print(f"Total: {arr_total}, Average: {arr_avg:.2f}, Min: {arr_min}, Max:Â {arr_max}")
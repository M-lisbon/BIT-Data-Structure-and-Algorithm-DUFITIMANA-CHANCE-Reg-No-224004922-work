{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMHuUZyD7NbzdCRzgrV2nVa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/M-lisbon/BIT-Data-Structure-and-Algorithm-DUFITIMANA-CHANCE-Reg-No-224004922-work/blob/main/Sack%20And%20Queue%20codes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zreT4AYZjgHG",
        "outputId": "6a3a3e47-4ece-4555-d167-6a301e772ace"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MoMo Stack (before pop): ['Enter Code', 'Enter PIN', 'Confirm']\n",
            "MoMo Stack (after pop): ['Enter Code', 'Enter PIN']\n",
            "UR Stack (before undo): ['Attend Class', 'Write Assignment', 'Sit Exam']\n",
            "UR Stack (after undo): ['Attend Class']\n",
            "Challenge (before pops): ['X', 'Y', 'Z']\n",
            "Challenge (final): ['X', 'W']\n",
            "Top element now: W\n",
            "\n",
            "Reflection:\n",
            "A stack uses LIFO (Last In, First Out).\n",
            "This means the last person who comes is served first.\n",
            "For serving people in order (e.g., in a bank or MoMo agent),\n",
            "a queue (FIFO: First In, First Out) is more fair than a stack.\n"
          ]
        }
      ],
      "source": [
        "# ---------------- Project 15: Stack Questions ----------------\n",
        "\n",
        "# Function to display stack nicely\n",
        "def show_stack(title, stack):\n",
        "    print(f\"{title}: {stack}\")\n",
        "\n",
        "# ---------------- Practical (Rwanda) 1 ----------------\n",
        "momo_stack = []\n",
        "momo_stack.append(\"Enter Code\")\n",
        "momo_stack.append(\"Enter PIN\")\n",
        "momo_stack.append(\"Confirm\")\n",
        "\n",
        "show_stack(\"MoMo Stack (before pop)\", momo_stack)\n",
        "\n",
        "# Pop last step\n",
        "momo_stack.pop()\n",
        "show_stack(\"MoMo Stack (after pop)\", momo_stack)\n",
        "\n",
        "\n",
        "# ---------------- Practical (Rwanda) 2 ----------------\n",
        "ur_stack = []\n",
        "ur_stack.append(\"Attend Class\")\n",
        "ur_stack.append(\"Write Assignment\")\n",
        "ur_stack.append(\"Sit Exam\")\n",
        "\n",
        "show_stack(\"UR Stack (before undo)\", ur_stack)\n",
        "\n",
        "# Undo two\n",
        "ur_stack.pop()\n",
        "ur_stack.pop()\n",
        "show_stack(\"UR Stack (after undo)\", ur_stack)\n",
        "\n",
        "\n",
        "# ---------------- Challenge ----------------\n",
        "challenge_stack = []\n",
        "challenge_stack.append(\"X\")\n",
        "challenge_stack.append(\"Y\")\n",
        "challenge_stack.append(\"Z\")\n",
        "\n",
        "show_stack(\"Challenge (before pops)\", challenge_stack)\n",
        "\n",
        "# Pop twice\n",
        "challenge_stack.pop()\n",
        "challenge_stack.pop()\n",
        "\n",
        "# Push W\n",
        "challenge_stack.append(\"W\")\n",
        "show_stack(\"Challenge (final)\", challenge_stack)\n",
        "\n",
        "# Show top\n",
        "print(\"Top element now:\", challenge_stack[-1])\n",
        "\n",
        "\n",
        "# ---------------- Reflection ----------------\n",
        "print(\"\\nReflection:\")\n",
        "print(\"A stack uses LIFO (Last In, First Out).\")\n",
        "print(\"This means the last person who comes is served first.\")\n",
        "print(\"For serving people in order (e.g., in a bank or MoMo agent),\")\n",
        "print(\"a queue (FIFO: First In, First Out) is more fair than a stack.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -------------------------------\n",
        "# Queue Questions in Python\n",
        "# -------------------------------\n",
        "\n",
        "from collections import deque\n",
        "\n",
        "# ---------- Practical 1: RRA Office ----------\n",
        "print(\"Practical 1: RRA Office\")\n",
        "\n",
        "# Queue of people\n",
        "rra_queue = [\"Alice\", \"Bob\", \"Celine\", \"David\"]\n",
        "\n",
        "# Serve 2 people\n",
        "rra_queue.pop(0)  # Alice served\n",
        "rra_queue.pop(0)  # Bob served\n",
        "\n",
        "# Front of the queue\n",
        "print(\"Front of the queue:\", rra_queue[0])\n",
        "print(\"-\"*40)\n",
        "\n",
        "# ---------- Practical 2: Nyabugogo Buses ----------\n",
        "print(\"Practical 2: Nyabugogo Buses\")\n",
        "\n",
        "# Queue of buses\n",
        "bus_queue = [\"Bus A\", \"Bus B\", \"Bus C\"]\n",
        "\n",
        "# First bus departs\n",
        "bus_queue.pop(0)\n",
        "\n",
        "# Next bus\n",
        "print(\"Next bus at front:\", bus_queue[0])\n",
        "print(\"-\"*40)\n",
        "\n",
        "# ---------- Challenge: Clinic Queue ----------\n",
        "print(\"Challenge: Clinic Queue\")\n",
        "\n",
        "# Using deque for efficient queue operations\n",
        "clinic_queue = deque()\n",
        "\n",
        "# Patients arrive\n",
        "clinic_queue.append(\"Patient 1\")\n",
        "clinic_queue.append(\"Patient 2\")\n",
        "clinic_queue.append(\"Patient 3\")\n",
        "\n",
        "# Serve first patient\n",
        "served_patient = clinic_queue.popleft()\n",
        "print(\"Served patient:\", served_patient)\n",
        "print(\"Next patient in line:\", clinic_queue[0])\n",
        "print(\"-\"*40)\n",
        "\n",
        "# ---------- Fairness Problem ----------\n",
        "print(\"Fairness Problem:\")\n",
        "\n",
        "# If a stack (LIFO) is used instead\n",
        "stack_queue = []\n",
        "\n",
        "# Patients arrive\n",
        "stack_queue.append(\"Patient 1\")\n",
        "stack_queue.append(\"Patient 2\")\n",
        "stack_queue.append(\"Patient 3\")\n",
        "\n",
        "# Serve patient from stack (LIFO)\n",
        "served_lifo = stack_queue.pop()\n",
        "print(\"Served patient using stack (LIFO):\", served_lifo)\n",
        "print(\"Next patient in line if stack used:\", stack_queue[-1] if stack_queue else \"None\")\n",
        "print(\"\\nObservation: Last arrived patient served first, early arrivals wait longer (unfair).\")\n",
        "print(\"-\"*40)\n",
        "\n",
        "# ---------- Reflection ----------\n",
        "print(\"Reflection:\")\n",
        "print(\"FIFO ensures first come, first served, representing fairness.\")\n",
        "print(\"LIFO can delay early arrivals, which is unfair for real-life queues like clinics or offices.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eHuvYJ2ZlQJh",
        "outputId": "4c04dfb4-34c9-4084-b117-12048ca3eb64"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Practical 1: RRA Office\n",
            "Front of the queue: Celine\n",
            "----------------------------------------\n",
            "Practical 2: Nyabugogo Buses\n",
            "Next bus at front: Bus B\n",
            "----------------------------------------\n",
            "Challenge: Clinic Queue\n",
            "Served patient: Patient 1\n",
            "Next patient in line: Patient 2\n",
            "----------------------------------------\n",
            "Fairness Problem:\n",
            "Served patient using stack (LIFO): Patient 3\n",
            "Next patient in line if stack used: Patient 2\n",
            "\n",
            "Observation: Last arrived patient served first, early arrivals wait longer (unfair).\n",
            "----------------------------------------\n",
            "Reflection:\n",
            "FIFO ensures first come, first served, representing fairness.\n",
            "LIFO can delay early arrivals, which is unfair for real-life queues like clinics or offices.\n"
          ]
        }
      ]
    }
  ]
}